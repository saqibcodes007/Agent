# agent.py (Definitive Production Version)

import asyncio
import os
import random
from datetime import datetime
from playwright.async_api import async_playwright, Page, Browser, Playwright

USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"

class Agent:
    """An advanced, stateful agent that executes Playwright code generated by an AI."""

    async def start(self):
        print("Agent: Starting...")
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(headless=True)
        self.context = await self.browser.new_context(user_agent=USER_AGENT)
        self.page = await self.context.new_page()
        await self.page.set_viewport_size({"width": 1280, "height": 800})
        await self.page.goto("about:blank")
        print("Agent: Started successfully.")

    async def stop(self):
        if self.browser: await self.browser.close()
        if self.playwright: await self.playwright.stop()
        print("Agent: Stopped.")

    async def perform_action(self, code_string: str) -> (bool, str | None):
        """Executes a string of Playwright code."""
        await asyncio.sleep(random.uniform(0.8, 1.5))
        try:
            print(f"Agent: Executing code -> {code_string}")
            await eval(code_string, {"self": self, "page": self.page})
            print("Agent: Code execution successful.")
            return True, None
        except Exception as e:
            error_message = f"Code execution failed: {e}"
            print(f"Agent: {error_message}")
            return False, error_message

    async def save_screenshot(self, screenshot_bytes: bytes):
        """Saves a screenshot to the local filesystem."""
        screenshots_dir = os.path.join(os.getcwd(), "screenshots")
        os.makedirs(screenshots_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_path = os.path.join(screenshots_dir, f"finish_{timestamp}.png")
        with open(file_path, "wb") as f:
            f.write(screenshot_bytes)
        print(f"Saved final screenshot to: {file_path}")

    async def get_html(self) -> str:
        return await self.page.content()
    
    async def get_current_url(self) -> str:
        return self.page.url
    
    async def get_screenshot(self, full_page=False) -> bytes:
        print("Agent: Taking screenshot...")
        return await self.page.screenshot(full_page=full_page)

    async def __aenter__(self):
        await self.start()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.stop()